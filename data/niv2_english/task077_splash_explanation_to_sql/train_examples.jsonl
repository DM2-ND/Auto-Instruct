{"id": "task077-f27f13a69cec47f19984e1d22fa48837", "input": "Step 1: find the characteristic_name, other_characteristic_details, characteristic_type_code of Characteristics table.\nStep 2: find the characteristic_name, other_characteristic_details, characteristic_type_code of Characteristics table.\nStep 3: show the rows that are in the results of step 1 but not in the results of step 2", "target": "SELECT characteristic_name , other_characteristic_details , characteristic_type_code FROM Characteristics EXCEPT SELECT characteristic_name , other_characteristic_details , characteristic_type_code FROM Characteristics"}
{"id": "task077-88e9ae7ef3634088a1960f93762e50c4", "input": "Step 1: find the number of rows of each value of id in medicine table.\nStep 2: find id, name in medicine table whose corresponding value in step 1 is greater than or equals 2", "target": "SELECT id , name FROM medicine GROUP BY id HAVING Count ( * ) > = 2"}
{"id": "task077-ef3c1622d9474278b555f3561a5fbc12", "input": "Step 1: find the number of rows of each value of id in architect table.\nStep 2: find id, name in architect table whose corresponding value in step 1 is greater than or equals 3", "target": "SELECT id , name FROM architect GROUP BY id HAVING Count ( * ) > = 3"}
{"id": "task077-9f3aae92c4d7435ea9a705c25ed0ca0a", "input": "Step 1: find the number of rows of each value of city in airports table.\nStep 2: find city in airports table whose corresponding value in step 1 is greater than or equals 2", "target": "SELECT city FROM airports GROUP BY city HAVING Count ( * ) > = 2"}
{"id": "task077-efd3b2a5ef834375b5765aeb134fcb43", "input": "Step 1: find the average min_sea_level_pressure_inches of each value of zip_code in weather table.\nStep 2: find zip_code in weather table whose corresponding value in step 1 is greater than 10", "target": "SELECT zip_code FROM weather GROUP BY zip_code HAVING Avg ( min_sea_level_pressure_inches ) > 10"}
{"id": "task077-64a79500c094484ea004cccc2acd603c", "input": "Step 1: find the number of rows of each value of course_id in Courses table.\nStep 2: find course_name, course_id in Courses table whose corresponding value in step 1 is less than 2", "target": "SELECT course_name , course_id FROM Courses GROUP BY course_id HAVING Count ( * ) < 2"}
{"id": "task077-17a96bae988e4269a58d6f8a5182df88", "input": "Step 1: find the number of rows of each value of Continent in country table.\nStep 2: find Continent of country table with largest value in the results of step 1", "target": "SELECT Continent FROM country GROUP BY Continent ORDER BY Count ( * ) Desc LIMIT 1"}
{"id": "task077-1c04bd2211f14a16b2741075bfd38995", "input": "Step 1: find the number of rows of each value of customer_name in Customers table.\nStep 2: find customer_name in Customers table whose corresponding value in step 1 is greater than or equals 3", "target": "SELECT customer_name FROM Customers GROUP BY customer_name HAVING Count ( * ) > = 3"}
{"id": "task077-8671a7e51aff4b4ca29b2e351ccaa646", "input": "Step 1: find the City of branch table.\nStep 2: For each row in branch table, find the corresponding rows in purchase table.\nStep 3: find City of the results of step 2 whose Total_pounds greater than 100.\nStep 4: show the rows that are in the results of step 1 but not in the results of step 3", "target": "SELECT T1.City FROM branch AS T1 EXCEPT SELECT T1.City FROM branch AS T1 JOIN purchase AS T2 ON T1.Branch_ID = T2.Branch_ID WHERE T2.Total_pounds > 100"}
{"id": "task077-c43b741727a54ae5a3c30ffc56d46cd1", "input": "Step 1: For each row in Physician table, find the corresponding rows in Appointment table.\nStep 2: find the number of rows of each value of AppointmentID in the results of step 1.\nStep 3: find Name of step 1 results with largest value in the results of step 2", "target": "SELECT T1.Name FROM Physician AS T1 JOIN Appointment AS T2 ON T1.EmployeeID = T2.Physician GROUP BY T2.AppointmentID ORDER BY Count ( * ) Desc LIMIT 1"}
{"id": "task077-44113ba0019a4410a67198a02dd4b109", "input": "Step 1: find the number of rows of each value of Channel in Cartoon table.\nStep 2: find Production_code, Channel of Cartoon table with largest value in the results of step 1", "target": "SELECT Production_code , Channel FROM Cartoon GROUP BY Channel ORDER BY Count ( * ) Desc LIMIT 1"}
{"id": "task077-c637d628d95e4834b7920bd8b010fcf9", "input": "Step 1: find the Name of people table.\nStep 2: find the Name of people table.\nStep 3: show the rows that are in the results of step 1 but not in the results of step 2", "target": "SELECT Name FROM people EXCEPT SELECT Name FROM people"}
{"id": "task077-4e324c32e3a3427c81e5c0100a22ff6f", "input": "Step 1: find the number of rows of each value of Entrepreneur_ID in entrepreneur table.\nStep 2: find Investor of entrepreneur table with largest value in the results of step 1", "target": "SELECT Investor FROM entrepreneur GROUP BY Entrepreneur_ID ORDER BY Count ( * ) Desc LIMIT 1"}
{"id": "task077-68a17bf8e7864c3bb5e8f2aaecf5ec1e", "input": "Step 1: find the average min_humidity of each value of zip_code in weather table.\nStep 2: find zip_code in weather table whose corresponding value in step 1 is less than 10", "target": "SELECT zip_code FROM weather GROUP BY zip_code HAVING Avg ( min_humidity ) < 10"}
{"id": "task077-a2bf0e70cda64e70a7cb043eaaaa208f", "input": "Step 1: find the customer_name of Customers table for which payment_method_code equals 2.\nStep 2: find the customer_name of Customers table for which payment_method_code greater than Credit Card.\nStep 3: show the rows that are in both the results of step 1 and the results of step 2", "target": "SELECT customer_name FROM Customers WHERE payment_method_code = 2 INTERSECT SELECT customer_name FROM Customers WHERE payment_method_code > \"Credit Card\""}
{"id": "task077-85ef0167ca434767a08869debf4e0c3d", "input": "Step 1: find the number of rows of each value of dept_name in course table.\nStep 2: find dept_name of course table with largest value in the results of step 1", "target": "SELECT dept_name FROM course GROUP BY dept_name ORDER BY Count ( * ) Desc LIMIT 1"}
{"id": "task077-a22e7e66a7bc4c00b4eaaac131bae453", "input": "find the average loser_age and the average loser_age in matches table", "target": "SELECT Avg ( loser_age ) , Avg ( loser_age ) FROM matches"}
{"id": "task077-c0679cf2f5e14d6e895d4fb543608abf", "input": "Step 1: For each row in appellations table, find the corresponding rows in wine table.\nStep 2: find Name of the results of step 1 whose Price less than 50 and appellations's State equals Monterey and County equals Sonoma", "target": "SELECT T2.Name FROM appellations AS T1 JOIN wine AS T2 ON T1.Appelation = T2.Appelation WHERE T2.Price < 50 AND T1.State = \"Monterey\" AND T1.County = \"Sonoma\""}
{"id": "task077-5e5e84bb9c64455fbf2af03054353cac", "input": "Step 1: find the Year of festival_detail table for which Location equals United States.\nStep 2: find the Year of festival_detail table for which Location equals United States.\nStep 3: show the rows that are in both the results of step 1 and the results of step 2", "target": "SELECT Year FROM festival_detail WHERE Location = \"United States\" INTERSECT SELECT Year FROM festival_detail WHERE Location = \"United States\""}
{"id": "task077-f026daf2f77246c8873a8fad5fb9c0d8", "input": "Step 1: For each row in College table, find the corresponding rows in Tryout table.\nStep 2: find each value of Tryout's cName in the results of step 1 along with the summation of enr of the corresponding rows to each value", "target": "SELECT Sum ( T1.enr ) , T2.cName FROM College AS T1 JOIN Tryout AS T2 ON T1.cName = T2.cName GROUP BY T2.cName"}
{"id": "task077-790ae7bbf0ee4bdf9c9433d6b5249aee", "input": "Step 1: find the number of rows of each value of Event_ID in Events table.\nStep 2: find Event_ID, Event_Details in Events table whose corresponding value in step 1 is greater than 1", "target": "SELECT Event_ID , Event_Details FROM Events GROUP BY Event_ID HAVING Count ( * ) > 1"}
{"id": "task077-489c002f71c1495b852cdd3f31676a5c", "input": "Step 1: find the number of rows of each value of Name in people table.\nStep 2: find Name in people table whose corresponding value in step 1 is greater than or equals 2", "target": "SELECT Name FROM people GROUP BY Name HAVING Count ( * ) > = 2"}
{"id": "task077-a41728f9ff324ba08c5f984ac99256de", "input": "Step 1: find the number of rows of each value of Region_name in region table.\nStep 2: find Region_name in region table whose corresponding value in step 1 is greater than or equals 2", "target": "SELECT Region_name FROM region GROUP BY Region_name HAVING Count ( * ) > = 2"}
{"id": "task077-226dcee9068b48e08dfa78e3d2392dbf", "input": "Step 1: For each row in Movie table, find the corresponding rows in Rating table.\nStep 2: find the average stars of each value of Rating's mID in the results of step 1.\nStep 3: find title in the results of step 1 whose corresponding value in step 2 is greater than or equals 2", "target": "SELECT T1.title FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID = T2.mID GROUP BY T2.mID HAVING Avg ( T2.stars ) > = 2"}
{"id": "task077-284437dfb4c846ec8c80aeaba86d38c0", "input": "Step 1: find the average total_value_purchased of each value of supplier_id in Product_Suppliers table.\nStep 2: find supplier_id in Product_Suppliers table whose corresponding value in step 1 is greater than 50000", "target": "SELECT supplier_id FROM Product_Suppliers GROUP BY supplier_id HAVING Avg ( total_value_purchased ) > 50000"}
{"id": "task077-724bd52edfcf413ca8cc7d1dfaad0dea", "input": "Step 1: for each value of Comptroller in party table, calculate number of rows.\nStep 2: show each value of Comptroller in party table along with the corresponding number of rows with largest value in the results of step 1", "target": "SELECT Governor , Count ( * ) FROM party GROUP BY Comptroller ORDER BY Count ( * ) Desc LIMIT 1"}
{"id": "task077-27d260db36e14bd6b2442ecf245a14d3", "input": "Step 1: find the number of rows of each value of document_type_code in Documents table.\nStep 2: find document_type_code of Documents table ordered descending by the results of step 1.\nStep 3: only show the first 3 rows of the results", "target": "SELECT document_type_code FROM Documents GROUP BY document_type_code ORDER BY Count ( * ) Desc LIMIT 3"}
{"id": "task077-6dbbac2053ee42e8a8b56a9d70269cd2", "input": "Step 1: find the average Graduate of each value of Year in discipline_enrollments table.\nStep 2: find Year of discipline_enrollments table with largest value in the results of step 1", "target": "SELECT Year FROM discipline_enrollments GROUP BY Year ORDER BY Avg ( Graduate ) Desc LIMIT 1"}
{"id": "task077-bd2b945e35cd43fbabfa24732d6ec689", "input": "Step 1: find the name of Person table.\nStep 2: find the name of Person table.\nStep 3: show the rows that are in the results of step 1 but not in the results of step 2", "target": "SELECT name FROM Person EXCEPT SELECT name FROM Person"}
{"id": "task077-10655dfcc934467496c947c0c2283d40", "input": "Step 1: For each row in Person table, find the corresponding rows in PersonFriend table.\nStep 2: find age of the results of step 1 with largest value of year", "target": "SELECT T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.name ORDER BY T2.year Desc LIMIT 1"}
{"id": "task077-684d75565ab243908fe21cc6587e3b26", "input": "Step 1: find the number of rows of each value of City in city table.\nStep 2: find City, Regional_Population in city table whose corresponding value in step 1 is greater than 1", "target": "SELECT City , Regional_Population FROM city GROUP BY City HAVING Count ( * ) > 1"}
{"id": "task077-698c55d1d23d400498d9ba059b226d7a", "input": "Step 1: find the number of rows of each value of state in College table.\nStep 2: find state in College table whose corresponding value in step 1 is equals 1", "target": "SELECT state FROM College GROUP BY state HAVING Count ( * ) = 1"}
{"id": "task077-1cce10ee45ea4604a01c6a231cd8c5bb", "input": "Step 1: find the average Height of each value of Sex in people table.\nStep 2: find Sex of people table with largest value in the results of step 1", "target": "SELECT Sex FROM people GROUP BY Sex ORDER BY Avg ( Height ) Desc LIMIT 1"}
{"id": "task077-96c90a1ddb6c485793328a33a08dfe80", "input": "Step 1: find the number of rows in weather table whose min_humidity greater than 8.\nStep 2: find the max_temperature_f of weather table for which max_sea_level_pressure_inches less than 50.\nStep 3: show the rows that are in both the results of step 1 and the results of step 2", "target": "SELECT Count ( * ) FROM weather WHERE min_humidity > 8 INTERSECT SELECT max_temperature_f FROM weather WHERE max_sea_level_pressure_inches < 50"}
{"id": "task077-94c264b655a24585b68a4dde6d06f684", "input": "Step 1: find the product_name of Products table.\nStep 2: find the product_name of Products table.\nStep 3: show the rows that are in the results of step 1 but not in the results of step 2", "target": "SELECT product_name FROM Products EXCEPT SELECT product_name FROM Products"}
{"id": "task077-a70a7fed1cc546ef8623297d8203e591", "input": "Step 1: find the rows of orchestra table for which Year_of_Founded greater than 2003.\nStep 2: find the Record_Company of orchestra table for which Year_of_Founded less than 2003.\nStep 3: show the rows that are in both the results of step 1 and the results of step 2", "target": "SELECT * FROM orchestra WHERE Year_of_Founded > 2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded < 2003"}
{"id": "task077-ac30723a05044aec9e0d965c2ec78649", "input": "Step 1: For each row in trip table, find the corresponding rows in weather table.\nStep 2: find each value of weather's zip_code in the results of step 1 along with the number of the corresponding rows to each value", "target": "SELECT Count ( * ) , T1.zip_code FROM trip AS T1 JOIN weather AS T2 GROUP BY T2.zip_code"}
{"id": "task077-78899ca013a7415fadbacb1e0a6e517d", "input": "Step 1: find the average charge_amount in Charges table.\nStep 2: For each row in Charges table, find the corresponding rows in Professionals table.\nStep 3: find first_name, last_name in the results of step 2 whose charge_amount less than the results of step 1", "target": "SELECT T2.first_name , T2.last_name FROM Charges AS T1 JOIN Professionals AS T2 WHERE T1.charge_amount < ( SELECT Avg ( T1.charge_amount ) FROM Charges AS T1 )"}
{"id": "task077-1e8b283a1a8a4e5baf93d777dec2bd36", "input": "Step 1: find the number of rows of each value of Airline in airlines table.\nStep 2: find Airline in airlines table whose corresponding value in step 1 is greater than or equals 200", "target": "SELECT Airline FROM airlines GROUP BY Airline HAVING Count ( * ) > = 200"}
{"id": "task077-41fb528d508c4b54a2a35975ec62b690", "input": "Step 1: find the number of rows of each value of Days_held in wrestler table.\nStep 2: find Days_held of wrestler table with largest value in the results of step 1", "target": "SELECT Days_held FROM wrestler GROUP BY Days_held ORDER BY Count ( * ) Desc LIMIT 1"}
{"id": "task077-400b059649aa4284aafa31579139b8d8", "input": "Step 1: find without repetition the artist_name of song table.\nStep 2: find the artist_name of song table for which rating greater than 8.\nStep 3: show the rows that are in the results of step 1 but not in the results of step 2", "target": "SELECT DISTINCT artist_name FROM song EXCEPT SELECT artist_name FROM song WHERE rating > 8"}
{"id": "task077-8d95592778e74c129e3081519d97fa76", "input": "Step 1: find the average duration in trip table whose zip_code equals 94103.\nStep 2: find the id of trip table whose duration greater than the results of step 1", "target": "SELECT id FROM trip WHERE duration > ( SELECT Avg ( duration ) FROM trip WHERE zip_code = 94103 )"}
{"id": "task077-2f6d1e74da204881b641d8c76c7067b8", "input": "find the maximum Age and the minimum Age in artist table", "target": "SELECT Max ( Age ) , Min ( Age ) FROM artist"}
{"id": "task077-cb2c784ab4324b57971106176dd86621", "input": "Step 1: find the number of rows of each value of County_Id in county table.\nStep 2: find County_name in county table whose corresponding value in step 1 is greater than or equals 2", "target": "SELECT County_name FROM county GROUP BY County_Id HAVING Count ( * ) > = 2"}
{"id": "task077-3d442a50404145c1b8e60f2c75175e41", "input": "Step 1: find the product_price of Products table.\nStep 2: find the product_price of Products table.\nStep 3: show the rows that are in the results of step 1 but not in the results of step 2", "target": "SELECT product_price FROM Products EXCEPT SELECT product_price FROM Products"}
{"id": "task077-fbd3c53d892a4b3c97d2845be315db74", "input": "Step 1: for each value of Document_ID in Paragraphs table, calculate number of rows.\nStep 2: show each value of Document_ID in Paragraphs table along with the corresponding number of rows ordered ascending by the results of step 1", "target": "SELECT Document_ID , Count ( * ) FROM Paragraphs GROUP BY Document_ID ORDER BY Count ( * ) Asc"}
{"id": "task077-72953c2df2c44277a80202d5c024a057", "input": "Step 1: find the characteristic_name, other_characteristic_details, characteristic_data_type of Characteristics table.\nStep 2: find the characteristic_name, other_characteristic_details, characteristic_type_code of Characteristics table.\nStep 3: show the rows that are in the results of step 1 but not in the results of step 2", "target": "SELECT characteristic_name , other_characteristic_details , characteristic_data_type FROM Characteristics EXCEPT SELECT characteristic_name , other_characteristic_details , characteristic_type_code FROM Characteristics"}
{"id": "task077-e43ee44edb5747e1a41c3526ac7dbcaf", "input": "Step 1: find the number of rows of each value of building_description in Apartment_Buildings table.\nStep 2: find building_address in Apartment_Buildings table whose corresponding value in step 1 is greater than 2", "target": "SELECT building_address FROM Apartment_Buildings GROUP BY building_description HAVING Count ( * ) > 2"}
{"id": "task077-0c2fa6431e4940f4929e8b3ebbcf4e45", "input": "Step 1: find the number of rows of each value of catalog_name in Catalogs table.\nStep 2: find date_of_publication in Catalogs table whose corresponding value in step 1 is greater than 1", "target": "SELECT date_of_publication FROM Catalogs GROUP BY catalog_name HAVING Count ( * ) > 1"}
{"id": "task077-2ff61f81e37242c8b187fdd75399521a", "input": "Step 1: find the rows of jobs table for which MIN_SALARY greater than 20000.\nStep 2: find the JOB_TITLE of jobs table for which MIN_SALARY greater than 12000.\nStep 3: show the rows that are in both the results of step 1 and the results of step 2", "target": "SELECT * FROM jobs WHERE MIN_SALARY > 20000 INTERSECT SELECT JOB_TITLE FROM jobs WHERE MIN_SALARY > 12000"}
{"id": "task077-4e1112f642d848f7a234ee7371d3bda4", "input": "Step 1: find the number of rows of each value of permanent_address_id in Students table.\nStep 2: find current_address_id, email_address of Students table with largest value in the results of step 1", "target": "SELECT current_address_id , email_address FROM Students GROUP BY permanent_address_id ORDER BY Count ( * ) Desc LIMIT 1"}
{"id": "task077-83e3e7fafe7a4c878db474f3e4ead7a6", "input": "Step 1: find the number of rows of each value of Type in school table.\nStep 2: find Type in school table whose corresponding value in step 1 is greater than or equals 2", "target": "SELECT Type FROM school GROUP BY Type HAVING Count ( * ) > = 2"}
{"id": "task077-d30407958f1a4695aab5b3dd3bed6601", "input": "Step 1: find the number of rows of each value of Railway_ID in railway table.\nStep 2: find Railway_ID, Location in railway table whose corresponding value in step 1 is greater than 1", "target": "SELECT Railway_ID , Location FROM railway GROUP BY Railway_ID HAVING Count ( * ) > 1"}
{"id": "task077-8f6f45efe2a54c9ca5ea6d3f9323829f", "input": "Step 1: find the number of rows in weather table whose min_humidity greater than 8.\nStep 2: find the mean_sea_level_pressure_inches of weather table for which max_temperature_f less than 50.\nStep 3: show the rows that are in both the results of step 1 and the results of step 2", "target": "SELECT Count ( * ) FROM weather WHERE min_humidity > 8 INTERSECT SELECT mean_sea_level_pressure_inches FROM weather WHERE max_temperature_f < 50"}
{"id": "task077-9c549f58d2204d81b32f2df1d8b645db", "input": "Step 1: find the number of rows of each value of Department in Affiliated_With table.\nStep 2: find Department of Affiliated_With table with largest value in the results of step 1", "target": "SELECT Department FROM Affiliated_With GROUP BY Department ORDER BY Count ( * ) Desc LIMIT 1"}
{"id": "task077-6d8f8c25fde24fb28e0f01e1058ba4c1", "input": "Step 1: find the number of rows of each value of decor in Rooms table.\nStep 2: find decor of Rooms table with smallest value in the results of step 1", "target": "SELECT decor FROM Rooms GROUP BY decor ORDER BY Count ( * ) Asc LIMIT 1"}
{"id": "task077-8b51791d438a4d97aa1336f4e761affe", "input": "Step 1: find the number of rows of each value of Lastname in Band table.\nStep 2: find Lastname of Band table with largest value in the results of step 1", "target": "SELECT Lastname FROM Band GROUP BY Lastname ORDER BY Count ( * ) Desc LIMIT 1"}
{"id": "task077-f27876426dfd4006afabb36308c73018", "input": "Step 1: For each row in Movie table, find the corresponding rows in Rating table.\nStep 2: find the average stars of each value of title in the results of step 1.\nStep 3: find title in the results of step 1 whose corresponding value in step 2 is greater than 2", "target": "SELECT T1.title FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID = T2.mID GROUP BY T1.title HAVING Avg ( T2.stars ) > 2"}
{"id": "task077-4a68698d7c044360b2fd62f345c257a8", "input": "Step 1: find the number of rows of each value of id in browser table.\nStep 2: find id, name of browser table with largest value in the results of step 1", "target": "SELECT id , name FROM browser GROUP BY id ORDER BY Count ( * ) Desc LIMIT 1"}
{"id": "task077-2d0566273c334334b95c11d863201079", "input": "Step 1: find the number of rows of each value of apt_number in Apartments table.\nStep 2: find apt_number of Apartments table with largest value in the results of step 1", "target": "SELECT apt_number FROM Apartments GROUP BY apt_number ORDER BY Count ( * ) Desc LIMIT 1"}
{"id": "task077-43ea946c98454e90b98fbbd87c8f8ca9", "input": "find the Location of perpetrator table with largest value of Injured", "target": "SELECT Location FROM perpetrator ORDER BY Injured Desc LIMIT 1"}
{"id": "task077-a6a1dcb80a5f4a20aa87ed8736d9f586", "input": "Step 1: find the average MIN_SALARY in jobs table.\nStep 2: find the EMPLOYEE_ID of employees table whose SALARY greater than the results of step 1", "target": "SELECT T1.EMPLOYEE_ID FROM employees AS T1 WHERE T1.SALARY > ( SELECT Avg ( T2.MIN_SALARY ) FROM jobs AS T2 )"}
{"id": "task077-7f976fdaafb948289ba567f872af0564", "input": "find the name of Person table for which age greater than engineer ordered ascending by name", "target": "SELECT name FROM Person WHERE age > \"engineer\" ORDER BY name Asc"}
{"id": "task077-092553accf254ed3af34080c8810d637", "input": "Step 1: find the Continent of country table.\nStep 2: For each row in country table, find the corresponding rows in countrylanguage table.\nStep 3: find Continent of the results of step 2 whose Language equals English.\nStep 4: show the rows that are in the results of step 1 but not in the results of step 3", "target": "SELECT T1.Continent FROM country AS T1 EXCEPT SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"English\""}
{"id": "task077-d44191fd91bd4724abd70f9de1562b76", "input": "Step 1: find the number of rows of each value of film_id in film table.\nStep 2: find title, film_id of film table with largest value in the results of step 1", "target": "SELECT title , film_id FROM film GROUP BY film_id ORDER BY Count ( * ) Desc LIMIT 1"}
{"id": "task077-c454c06badd744d1b370fd97a80bd523", "input": "Step 1: find the number of rows of each value of driverId in pitStops table.\nStep 2: find driverId, driverId in pitStops table whose corresponding value in step 1 is greater than 5", "target": "SELECT driverId , driverId FROM pitStops GROUP BY driverId HAVING Count ( * ) > 5"}
{"id": "task077-70834b64679846c7afaf56a7af95653b", "input": "Step 1: For each row in players table, find the corresponding rows in matches table.\nStep 2: find first_name, country_code, birth_date of the results of step 1 with smallest value of winner_rank", "target": "SELECT T1.first_name , T1.country_code , T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id ORDER BY T2.winner_rank Asc LIMIT 1"}
{"id": "task077-617e7e72f94e47c4a7ae2dc919255cd1", "input": "Step 1: find the average transaction_amount in Financial_Transactions table.\nStep 2: find the account_id of Financial_Transactions table whose transaction_amount greater than the results of step 1", "target": "SELECT account_id FROM Financial_Transactions WHERE transaction_amount > ( SELECT Avg ( transaction_amount ) FROM Financial_Transactions )"}
{"id": "task077-767956a4244f4f28878b2f0e238f61b3", "input": "find each value of City_ID in city table along with the average Population of the corresponding rows to each value", "target": "SELECT City_ID , Avg ( Population ) FROM city GROUP BY City_ID"}
{"id": "task077-e91f4860ea6a4db5a9452cfe506e7f43", "input": "Step 1: find the number of rows of each value of winner_entry in matches table.\nStep 2: find tourney_name, loser_rank of matches table with largest value in the results of step 1", "target": "SELECT tourney_name , loser_rank FROM matches GROUP BY winner_entry ORDER BY Count ( * ) Desc LIMIT 1"}
{"id": "task077-259c36ca29364cbb8f5031935f96233c", "input": "Step 1: find the number of rows of each value of Abbreviation in airlines table.\nStep 2: find Abbreviation, Country of airlines table with smallest value in the results of step 1", "target": "SELECT Abbreviation , Country FROM airlines GROUP BY Abbreviation ORDER BY Count ( * ) Asc LIMIT 1"}
{"id": "task077-f078fcaae6f746aa9fc6b9ee98780f03", "input": "Step 1: for each value of apt_type_code in Apartments table, calculate number of rows.\nStep 2: show each value of apt_type_code in Apartments table along with the corresponding summation of bathroom_count with largest value in the results of step 1", "target": "SELECT apt_type_code , Sum ( bathroom_count ) FROM Apartments GROUP BY apt_type_code ORDER BY Count ( * ) Desc LIMIT 1"}
{"id": "task077-3dbdcd18844548a2853f10c26ff5f0dd", "input": "find the Code of country table for which Population greater than English", "target": "SELECT Code FROM country WHERE Population > \"English\""}
