{"id": "task076-788de54f26d34f1da02031c2a0a647e8", "input": "SQL: SELECT name , Count ( * ) FROM photos GROUP BY camera_lens_id ORDER BY Count ( * ) Asc\nFeedback: Replace camera lens id with id in step 1 , and camera lens id in photos table with name in camera lens .", "target": "SELECT T1.name ,  count(*) FROM camera_lens AS T1 JOIN photos AS T2 ON T1.id  =  T2.camera_lens_id GROUP BY T1.id ORDER BY count(*)"}
{"id": "task076-fa5d8ec93013427eb22b44a028e43989", "input": "SQL: SELECT Count ( * ) FROM Highschooler\nFeedback: Find the number of rows in Friends table for each student .", "target": "SELECT student_id ,  count(*) FROM Friend GROUP BY student_id"}
{"id": "task076-36db2b31d42b4de1be77a92416a0729b", "input": "SQL: SELECT T2.Volume FROM volume AS T1 JOIN music_festival AS T2 ON T1.Volume_ID = T2.Volume ORDER BY T1.Weeks_on_Top Desc LIMIT 1\nFeedback: Replace volume with song .", "target": "SELECT Song FROM volume ORDER BY Weeks_on_Top DESC LIMIT 1"}
{"id": "task076-e2b9d384e9a54a00a9dda9b7344df1a8", "input": "SQL: SELECT T1.title FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.album_id GROUP BY T2.album_id HAVING Sum ( T2.milliseconds ) > 10\nFeedback: In step 2 find number of rows of each value of tracks 's album id .", "target": "SELECT T1.title FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.album_id GROUP BY T1.id HAVING count(T1.id)  >  10"}
{"id": "task076-e0e24e42d7474a5cb368267229039b52", "input": "SQL: SELECT Count ( * ) FROM country AS T1 WHERE T1.Country_ID NOT IN ( SELECT T2.Country_ID FROM roller_coaster AS T2 WHERE T2.Height > 3000 )\nFeedback: There should be length instead of height .", "target": "SELECT count(*) FROM country WHERE country_id NOT IN ( SELECT country_id FROM roller_coaster WHERE LENGTH  >  3000 )"}
{"id": "task076-7ebb1b7dbef947f78f7301f5eb8de923", "input": "SQL: SELECT AirportName FROM airports WHERE AirportName = \"AKO\"\nFeedback: Exchange 2nd airport name with airport code .", "target": "SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  \"AKO\""}
{"id": "task076-4b52798184824fcb8e751b6e16062db0", "input": "SQL: SELECT Avg ( T2.Order_Quantity ) FROM Invoices AS T1 JOIN Invoice_Items AS T2 ON T1.Invoice_ID = T2.Invoice_ID WHERE T1.payment_method_code = \"MasterCard\"\nFeedback: The required parameter is Invoices' order quantity , not Invoice Items's order quantity in step 2.", "target": "SELECT avg(Order_Quantity) FROM Invoices WHERE payment_method_code  =  \"MasterCard\""}
{"id": "task076-6dcb7b0244184095b225d26d39c13ff1", "input": "SQL: SELECT document_name FROM Documents GROUP BY document_name ORDER BY Count ( * ) Desc LIMIT 1\nFeedback: Change document name with document code in step 1 , Ensure that documents document code present in document sections document code .", "target": "SELECT t1.document_name FROM documents AS t1 JOIN document_sections AS t2 ON t1.document_code  =  t2.document_code GROUP BY t1.document_code ORDER BY count(*) DESC LIMIT 1"}
{"id": "task076-e97b17915975403f9e0d110237f1d614", "input": "SQL: SELECT name FROM aircraft GROUP BY name ORDER BY Count ( * ) Asc LIMIT 1\nFeedback: Replace name in aircraft table with employee id in certificate table .", "target": "SELECT T2.name FROM Certificate AS T1 JOIN Aircraft AS T2 ON T2.aid  =  T1.aid GROUP BY T1.aid ORDER BY count(*) DESC LIMIT 1"}
{"id": "task076-704dffcff6e746c9b6cfbad2ac2a2c36", "input": "SQL: SELECT Count ( * ) FROM budget WHERE total_budget_percent_budgeted > 3000 OR Year < 2001\nFeedback: Rewrite the condition as budgeted greater than 3000 and year equals or less than 2001\".", "target": "SELECT count(*) FROM budget WHERE budgeted  >  3000 AND YEAR  <=  2001"}
{"id": "task076-7c732f6428824558abb1d2dfe9a99a0c", "input": "SQL: SELECT T1.apt_type_code , T1.apt_number FROM Apartments AS T1 JOIN Guests AS T2 JOIN Apartment_Bookings AS T3 ON T1.apt_id = T3.apt_id AND T3.guest_id = T2.guest_id WHERE T2.guest_first_name = \"Kyle\"\nFeedback: I want the apartment buildings table with their building managers.", "target": "SELECT T2.apt_type_code ,  T2.apt_number FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id  =  T2.building_id WHERE T1.building_manager  =  \"Kyle\""}
{"id": "task076-8b4689c4d1044f12a7b8847c7fdbf779", "input": "SQL: SELECT T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance > 200000\nFeedback: make sure checking customer id greater than savings customer id .", "target": "SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T2.balance  >  T3.balance"}
{"id": "task076-2e00cac5b6b94159a5cf4bd38c02bdbe", "input": "SQL: SELECT Product_Name FROM Products WHERE Product_Price < 1000000\nFeedback: Make sure to find average product price instead of product price .", "target": "SELECT Product_Name FROM PRODUCTS GROUP BY Product_Name HAVING avg(Product_Price)  <  1000000"}
{"id": "task076-7881d7d83aa34198817ab000ac92a5ff", "input": "SQL: SELECT country , Count ( * ) FROM airports GROUP BY country\nFeedback: find name , country from airlines table , ensure each rows correspond airline id of routes table .", "target": "SELECT T1.country ,  T1.name ,  count(*) FROM airlines AS T1 JOIN routes AS T2 ON T1.alid  =  T2.alid GROUP BY T1.country ,  T1.name"}
{"id": "task076-592e9a131aea4a2dbf7171e19bc5dd67", "input": "SQL: SELECT T1.name , T1.grade , Count ( * ) FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T2.student_id\nFeedback: No need to find grade in step 2.", "target": "SELECT T2.name ,  count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id"}
{"id": "task076-60fd31ff18474680bd52617cdd021b40", "input": "SQL: SELECT individual_last_name FROM Individuals\nFeedback: Be sure that those individual id has been listed in organization contact individuals .", "target": "SELECT DISTINCT t1.individual_last_name FROM individuals AS t1 JOIN organization_contact_individuals AS t2 ON t1.individual_id  =  t2.individual_id"}
{"id": "task076-233c0cb916544a2b831d8f9c5857a7fb", "input": "SQL: SELECT cust_name , credit_score FROM customer\nFeedback: Specify that the customers have taken any loan .", "target": "SELECT DISTINCT T1.cust_name ,  T1.credit_score FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id"}
{"id": "task076-8e4189f6423140e39ed0610e162fe1d1", "input": "SQL: SELECT Sum ( T1.Total ) FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Name LIKE \"January\"\nFeedback: Their is no need to do summation , Exchange name with birth date in step 2.", "target": "SELECT T1.total FROM body_builder AS T1 JOIN people AS T2 ON T1.people_id  =  T2.people_id WHERE T2.Birth_Date LIKE \"%January%\""}
{"id": "task076-2b726df694644c3ab66d263b098c9924", "input": "SQL: SELECT Sex , Count ( * ) FROM Student GROUP BY Sex\nFeedback: Need to find number of students with allergy", "target": "SELECT Allergy ,  count(*) FROM Has_allergy GROUP BY Allergy"}
{"id": "task076-4b8d640f2cc1421b91e6aa4dd32a1afc", "input": "SQL: SELECT Name , Count ( * ) FROM singer GROUP BY Name\nFeedback: Make sure to find number of similar rows for all  singer in concert's singer id.", "target": "SELECT T2.name ,  count(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id GROUP BY T2.singer_id"}
{"id": "task076-90710c391ac74e778ce5ada82c370531", "input": "SQL: SELECT T1.student_capacity , T1.gender FROM Dorm AS T1 JOIN Dorm_amenity AS T2 JOIN Has_amenity AS T3 ON T1.dormid = T3.dormid AND T3.amenid = T2.amenid WHERE T2.amenity_name LIKE \"Donor\"\nFeedback: Instead of amenity name use dorm 's dorm name in step 2.", "target": "SELECT student_capacity ,  gender FROM dorm WHERE dorm_name LIKE '%Donor%'"}
{"id": "task076-8a1805146f684033adf94f821413e90b", "input": "SQL: SELECT staff_name FROM Staff\nFeedback: Confirm that count of staff id is more than one time in staff department assignments table .", "target": "SELECT T1.staff_name FROM staff AS T1 JOIN staff_department_assignments AS T2 ON T1.staff_id  =  T2.staff_id GROUP BY T2.staff_id HAVING COUNT (*)  >  1"}
{"id": "task076-d610b3288cc346228c2eb7564268644d", "input": "SQL: SELECT Count ( * ) FROM budget WHERE Invested > 8.5\nFeedback: Find number of rows endowment for which school id appears more than once . Replace invested with amount .", "target": "SELECT count(*) FROM (SELECT * FROM endowment WHERE amount  >  8.5 GROUP BY school_id HAVING count(*)  >  1)"}
{"id": "task076-941e0e10a800417ea6d7647e5c37f28f", "input": "SQL: SELECT apt_number , Count ( * ) FROM Apartments GROUP BY apt_number\nFeedback: Also need to find room count .", "target": "SELECT apt_number ,  room_count FROM Apartments"}
{"id": "task076-e6ecd4e1520c411994984a09e509346a", "input": "SQL: SELECT T2.order_id FROM Orders AS T1 JOIN Order_Items AS T2 ON T2.order_id = T1.order_id JOIN Shipments AS T3 ON T1.order_id = T3.order_id ORDER BY T3.shipment_date Desc LIMIT 1\nFeedback: Require date order placed instead shipment date", "target": "SELECT order_id FROM orders ORDER BY date_order_placed DESC LIMIT 1"}
{"id": "task076-b68cc86fc0c0410081525c314e41f297", "input": "SQL: SELECT name , Count ( * ) FROM aircraft GROUP BY name\nFeedback: It should display number of corresponding rows for each airline id in flight table .", "target": "SELECT T2.name ,  count(*) FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid GROUP BY T1.aid"}
{"id": "task076-7cccc5d11c4843d9a423b6ce8658823f", "input": "SQL: SELECT T2.dept_name FROM department AS T1 JOIN student AS T2 ON T1.dept_name = T2.dept_name GROUP BY T2.dept_name ORDER BY Sum ( T1.budget ) Desc LIMIT 1\nFeedback: Remove step 2 , count number of row to each value of department name for each table .", "target": "SELECT dept_name FROM student GROUP BY dept_name ORDER BY count(*) DESC LIMIT 1"}
{"id": "task076-cb5ec0046fda446596f016904e23ca48", "input": "SQL: SELECT T1.name FROM Reviewer AS T1 JOIN Rating AS T2 ON T1.rID = T2.rID GROUP BY T2.rID HAVING Count ( * ) > 3\nFeedback: Replace reviewer id with rating stars .", "target": "SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID WHERE T1.stars  >  3"}
{"id": "task076-a3049a55f6f34958a8dde1cbae67f9a9", "input": "SQL: SELECT T2.semester , T1.year FROM section AS T1 JOIN takes AS T2 ON T1.year = T2.year GROUP BY T2.semester ORDER BY Count ( * ) Asc LIMIT 1\nFeedback: Need to find takes's semester and year for smallest number of students enrolled in it .", "target": "SELECT semester ,  YEAR FROM takes GROUP BY semester ,  YEAR ORDER BY count(*) LIMIT 1"}
{"id": "task076-ffc7b5cdd60540d8bdb63fc8d4638fb3", "input": "SQL: SELECT Name , City FROM branch EXCEPT SELECT Name , City FROM branch\nFeedback: Only find for without any registered members in membership register branch .", "target": "SELECT name ,  city FROM branch WHERE branch_id NOT IN (SELECT branch_id FROM membership_register_branch)"}
{"id": "task076-a181051e71e140b99362fdf03b3c3060", "input": "SQL: SELECT T2.Name FROM Locations AS T1 JOIN Tourist_Attractions AS T2 ON T1.Location_ID = T2.Location_ID WHERE T1.Address = \"game1\"\nFeedback: We should substitute address equals game with name from photos table equals game 1.", "target": "SELECT T2.Name FROM PHOTOS AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID WHERE T1.Name  =  \"game1\""}
{"id": "task076-06d74fd604a4474da6d5649b52fdc446", "input": "SQL: SELECT T3.date_of_enrolment FROM Subjects AS T1 JOIN Courses AS T2 ON T1.subject_id = T2.subject_id JOIN Student_Course_Enrolment AS T3 ON T2.course_id = T3.course_id WHERE T1.subject_name = \"Spanish\"\nFeedback: course name should be used instead of subject name .", "target": "SELECT T2.date_of_enrolment FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id  =  T2.course_id WHERE T1.course_name  =  \"Spanish\""}
{"id": "task076-e6e4a6b169214b9fbeaebbb2dc20f595", "input": "SQL: SELECT Fname , Lname FROM Faculty WHERE Fname = \"Linda\"\nFeedback: Ensure that faculty faculty id present under student advisor for student Linda Smith", "target": "SELECT T1.fname ,  T1.lname FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor WHERE T2.fname  =  \"Linda\" AND T2.lname  =  \"Smith\""}
{"id": "task076-6ba96e5b0d354b92bc1ba17ca5417fa5", "input": "SQL: SELECT country FROM circuits WHERE lat BETWEEN 2011 AND 2009\nFeedback: Change country of circuits table with races' name and \"lat equals or\" with \"races' year is\".", "target": "SELECT name FROM races WHERE YEAR BETWEEN 2009 AND 2011"}
{"id": "task076-d45e4799329b43ab95649959868b0cd8", "input": "SQL: SELECT T3.Campus FROM Campuses AS T1 JOIN degrees AS T2 ON T2.Campus = T1.Id JOIN faculty AS T3 ON T1.Id = T3.Campus GROUP BY T3.Campus ORDER BY Avg ( T2.Degrees ) Desc LIMIT 1\nFeedback: In step 2, you need to determine the value of degrees of campuses from the result of step 1.", "target": "SELECT campus FROM degrees GROUP BY campus ORDER BY sum(degrees) DESC LIMIT 1"}
{"id": "task076-40039dfdc8d14af9b82fc274e580d755", "input": "SQL: SELECT Name FROM actor EXCEPT SELECT Name FROM actor\nFeedback: In step 1 find musical id of musical table , in step 2 find musical id of actor table .", "target": "SELECT Name FROM musical WHERE Musical_ID NOT IN (SELECT Musical_ID FROM actor)"}
{"id": "task076-b79de62159fc4bdc917bb43e49171a70", "input": "SQL: SELECT product_name , Count ( * ) FROM Products GROUP BY product_name\nFeedback: It should be correspond rows of each value of product id in complaints table .", "target": "SELECT t1.product_name ,  count(*) FROM products AS t1 JOIN complaints AS t2 ON t1.product_id  =  t2.product_id GROUP BY t1.product_name"}
{"id": "task076-0383f2899761402795e3ad0cc2ee8a6a", "input": "SQL: SELECT Name FROM country GROUP BY Continent ORDER BY Count ( * ) Desc LIMIT 1\nFeedback: Find language of countrylanguage table whose largest value of language .", "target": "SELECT LANGUAGE FROM countrylanguage GROUP BY LANGUAGE ORDER BY count(*) DESC LIMIT 1"}
{"id": "task076-419873d515e64220958d1fc56d646c42", "input": "SQL: SELECT T1.sec_id FROM section AS T1 WHERE T1.course_id NOT IN ( SELECT T2.course_id FROM prereq AS T2 )\nFeedback: In step 2 it should find course's course id which are'nt one of the results of step 1.", "target": "SELECT course_id FROM course EXCEPT SELECT course_id FROM prereq"}
{"id": "task076-e6b58880413847b687464aded2d108b7", "input": "SQL: SELECT artist_name FROM files ORDER BY artist_name Asc\nFeedback: There should be song name of song table , the order of ascending should be by resolution .", "target": "SELECT song_name FROM song ORDER BY resolution"}
{"id": "task076-5325337d09264fb6a7de8d112446c2ae", "input": "SQL: SELECT T2.Room FROM Faculty AS T1 JOIN Department AS T2 JOIN Member_of AS T3 ON T1.FacID = T3.FacID AND T3.DNO = T2.DNO WHERE T1.Rank = \"Professor\" AND T1.Building = \"NEB\"\nFeedback: There should be Faculty's room instead of Department's room .", "target": "SELECT Room FROM FACULTY WHERE Rank  =  \"Professor\" AND Building  =  \"NEB\""}
{"id": "task076-134215d5eb98472288fa48f2839348b9", "input": "SQL: SELECT T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid WHERE T1.origin = \"John Williams\"\nFeedback: Add employee table in step 1 , interchange origin with employee's name , ensure employee's employee id present in certificate table .", "target": "SELECT T3.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T1.name  =  \"John Williams\""}
{"id": "task076-9e0c964b8d674798aa4401cd33afa747", "input": "SQL: SELECT Name , Count ( * ) FROM actor GROUP BY Name\nFeedback: Replace actor table with musical table . corresponding rows to each value of musical id , make sure that musical id present in actor table .", "target": "SELECT T2.Name ,  COUNT(*) FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID GROUP BY T1.Musical_ID"}
{"id": "task076-51a00764e7184cf89457a63f15d5a3d0", "input": "SQL: SELECT T1.first_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id WHERE T2.name = \"Kacey\" EXCEPT SELECT T1.first_name FROM Owners AS T1\nFeedback: Look for the owners and professionals first name that are not present in the name of Dogs table.", "target": "SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners EXCEPT SELECT name FROM Dogs"}
{"id": "task076-b803f94e901f428fa8aecb8ddc572135", "input": "SQL: SELECT Count ( * ) FROM Apartment_Facilities WHERE facility_code = \"Gym\"\nFeedback: In apartments table, check out the total number of rooms.", "target": "SELECT sum(T2.room_count) FROM Apartment_Facilities AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.facility_code  =  \"Gym\""}
{"id": "task076-6d0a2328da714dbb86ff04a647714fa4", "input": "SQL: SELECT T1.Name FROM Physician AS T1 JOIN Medication AS T2 JOIN Prescribes AS T3 ON T1.EmployeeID = T3.Physician AND T3.Medication = T2.Code WHERE T2.Name = \"Procrastin-X\"\nFeedback: Need to find Nurse's name whose corresponding employee id is present in Undergoes's assisting nurse .", "target": "SELECT DISTINCT T2.name FROM undergoes AS T1 JOIN nurse AS T2 ON T1.AssistingNurse  =  T2.EmployeeID"}
{"id": "task076-166894e0104948c6bcfe650748e90d31", "input": "SQL: SELECT T2.FirstName , T2.LastName FROM list AS T1 JOIN teachers AS T2 WHERE T1.FirstName = \"EVELINA\"\nFeedback: In step 2 find teachers's first name , last name of step 1's results who teaches list's first name equals EVELINA and last name equals BROMLEY .", "target": "SELECT T2.firstname ,  T2.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T1.firstname  =  \"EVELINA\" AND T1.lastname  =  \"BROMLEY\""}
{"id": "task076-62cb83f526ee4314943ea8d06e04a75a", "input": "SQL: SELECT T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance < ( SELECT Avg ( T3.balance ) FROM CHECKING AS T3 )\nFeedback: In step 2 Switch savings with checking . In step 3 Switch savings balance with checking balance .", "target": "SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  <  (SELECT avg(balance) FROM checking)"}
{"id": "task076-27fbd94444b04206ae4e6f6e2223cb1f", "input": "SQL: SELECT T1.Document_ID FROM Documents AS T1 EXCEPT SELECT T3.Document_ID FROM Ref_Document_Types AS T2 JOIN Documents AS T1 ON T2.Document_Type_Code = T1.Document_Type_Code JOIN Documents_with_Expenses AS T3 ON T1.Document_ID = T3.Document_ID WHERE T2.Document_Type_Name = \"CV\"\nFeedback: Make sure document type code equals CV .", "target": "SELECT document_id FROM Documents WHERE document_type_code  =  \"CV\" EXCEPT SELECT document_id FROM Documents_with_expenses"}
{"id": "task076-7d42818cc67f45d18b14c23ab396a2f0", "input": "SQL: SELECT Name FROM people ORDER BY Weight Desc LIMIT 1\nFeedback: Make sure people id of that people is present in perpetrator table .", "target": "SELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Weight DESC LIMIT 1"}
{"id": "task076-3024ce747d4248c98ec048c4d64b750e", "input": "SQL: SELECT Name , Country FROM singer WHERE Name LIKE \"Hey\"\nFeedback: I want song name as Hey.", "target": "SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'"}
{"id": "task076-19d00cd3c8ed42b18043b48d2156f557", "input": "SQL: SELECT DISTINCT T1.director FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID = T2.mID WHERE T2.stars = \"Sarah Martinez\"\nFeedback: include reviewer table and use name in place of rating for step 1.", "target": "SELECT DISTINCT T2.director FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T3.name  =  'Sarah Martinez'"}
{"id": "task076-2f568895da1b403490a98c9a68e1686a", "input": "SQL: SELECT Sum ( budget ) FROM department WHERE dept_name = \"Marketing\"\nFeedback: Find for prerequisite id equals Marketing and prerequisite id equals Finance .", "target": "SELECT sum(budget) FROM department WHERE dept_name  =  'Marketing' OR dept_name  =  'Finance'"}
{"id": "task076-377966fd245e4cd2befd0651ef493e47", "input": "SQL: SELECT T1.characteristic_type_description FROM Ref_Characteristic_Types AS T1 JOIN Characteristics AS T2 ON T1.characteristic_type_code = T2.characteristic_type_code WHERE T2.characteristic_name = \"catnip\"\nFeedback: Change reference characteristic types table , characteristics table , characteristic type description , characteristic name to products table , reference colors table , color description and product name .", "target": "SELECT t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code WHERE t1.product_name  =  \"catnip\""}
{"id": "task076-5213998b893442e49ccd009cba137201", "input": "SQL: SELECT T2.name FROM department AS T1 JOIN instructor AS T2 ON T2.dept_name = T1.dept_name JOIN student AS T3 ON T1.dept_name = T3.dept_name GROUP BY T2.name ORDER BY Sum ( T3.tot_cred ) Desc LIMIT 1\nFeedback: Make sure instructor is advising student with largest number of total credits .", "target": "SELECT T2.name FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id ORDER BY T3.tot_cred DESC LIMIT 1"}
{"id": "task076-8a89bef1d151497390dec7ec399ab2f7", "input": "SQL: SELECT T1.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id GROUP BY T2.genre_id HAVING Sum ( T2.milliseconds ) > 100\nFeedback: Need to find playlist list .", "target": "SELECT T2.name FROM playlist_tracks AS T1 JOIN playlists AS T2 ON T2.id = T1.playlist_id GROUP BY T1.playlist_id HAVING count(T1.track_id)  >  100"}
{"id": "task076-099a5420e38f430cb198b86d76dcd642", "input": "SQL: SELECT artist_name , Count ( * ) FROM files GROUP BY artist_name\nFeedback: Take formats in place of artist name and should find number of corresponding rows to each format .", "target": "SELECT count(*) ,  formats FROM files GROUP BY formats"}
{"id": "task076-cf7587c79b2948fabb2eeac14cc7eb6d", "input": "SQL: SELECT title FROM course\nFeedback: Make sure it has two prerequisites .", "target": "SELECT T1.title FROM course AS T1 JOIN prereq AS T2 ON T1.course_id  =  T2.course_id GROUP BY T2.course_id HAVING count(*)  =  2"}
{"id": "task076-4dbfe24ac4ee463f8b458808d0709e8e", "input": "SQL: SELECT DISTINCT city FROM Addresses\nFeedback: only consider the addresses used in people addresses", "target": "SELECT DISTINCT T1.city FROM addresses AS T1 JOIN people_addresses AS T2 ON T1.address_id = T2.address_id"}
{"id": "task076-54d6d58a3d314306b962dba7bcf8c8b3", "input": "SQL: SELECT T2.Location_Code FROM Ref_Locations AS T1 JOIN Document_Locations AS T2 ON T1.Location_Code = T2.Location_Code GROUP BY T1.Location_Code HAVING Count ( * ) > = 3\nFeedback: replace Ref Locations's location code with Document Locations's location code", "target": "SELECT location_code FROM Document_locations GROUP BY location_code HAVING count(*)  >=  3"}
{"id": "task076-d353bbcf5a5e4c2b8a97381bb99e44a5", "input": "SQL: SELECT catalog_name FROM Catalogs\nFeedback: Replace catalog name of catalogs table with catalog entry name of catalog contents .", "target": "SELECT distinct(catalog_entry_name) FROM catalog_contents"}
{"id": "task076-3b631d7facc145da8ac57b7e04ac68bd", "input": "SQL: SELECT T1.School_name , T1.Location , T2.donator_name FROM School AS T1 JOIN endowment AS T2 ON T1.School_id = T2.School_id\nFeedback: Change donator name with mascot in step 2.", "target": "SELECT school_name ,  LOCATION ,  mascot FROM school"}
{"id": "task076-9e100051cda345a9aba5d720c405f036", "input": "SQL: SELECT product FROM product WHERE dpi < \"A4\" OR dpi < 5\nFeedback: Need to supplant dpi with pages per minute color and dpi less than with max page size equals A 4.", "target": "SELECT product FROM product WHERE max_page_size  =  \"A4\" OR pages_per_minute_color  <  5"}
{"id": "task076-3e07a44eb4fd461290675eedbfb8f0cd", "input": "SQL: SELECT T1.cName FROM College AS T1 JOIN Tryout AS T2 ON T1.cName = T2.cName WHERE T1.enr > \"FL\" GROUP BY T2.cName HAVING Count ( * ) > = 1\nFeedback: Make sure colleges is greater one or more colleges of state equals Florida .", "target": "SELECT DISTINCT cName FROM college WHERE enr  >  (SELECT min(enr) FROM college WHERE state  =  'FL')"}
{"id": "task076-afae5e52547645f5a3ea4a4833f2a7bb", "input": "SQL: SELECT T1.name , Avg ( T2.duration ) FROM station AS T1 JOIN trip AS T2 GROUP BY T2.start_station_id\nFeedback: need to final longitude of station as well", "target": "SELECT T1.name ,  T1.long ,  avg(T2.duration) FROM station AS T1 JOIN trip AS T2 ON T1.id  =  T2.start_station_id GROUP BY T2.start_station_id"}
{"id": "task076-2a04ee1ebadd4eb3b935218038f9da0a", "input": "SQL: SELECT T1.name FROM student AS T1 JOIN time_slot AS T2 WHERE T2.day = 2010 INTERSECT SELECT T1.name FROM student AS T1 JOIN time_slot AS T2 WHERE T2.day = 2009\nFeedback: Replace time slot table with takes classes table , There should be year instead of day in both step .", "target": "SELECT DISTINCT T1.name FROM student AS T1 JOIN takes AS T2 ON T1.id  =  T2.id WHERE YEAR  =  2009 OR YEAR  =  2010"}
{"id": "task076-b599bf50afd84064a081114404c61050", "input": "SQL: SELECT Count ( * ) FROM Dogs WHERE weight = 7.57\nFeedback: Find number of rows of distinct professional id in treatments table .", "target": "SELECT count(DISTINCT professional_id) FROM Treatments"}
{"id": "task076-07a0d5db341b43e09292248250a466a6", "input": "SQL: SELECT aid , name FROM aircraft\nFeedback: Make sure aircraft should correspond to maximum distance .", "target": "SELECT aid ,  name FROM Aircraft ORDER BY distance DESC LIMIT 1"}
{"id": "task076-da7a23953b82452e9ec781eec43d0e6c", "input": "SQL: SELECT T1.artist_name FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name WHERE T2.country = \"UK\" INTERSECT SELECT T2.artist_name FROM song AS T2 WHERE T2.country = \"English\"\nFeedback: In step 2 it should find for artist's genre is instead of song's genre is , in step 3 replace song's genre is with song's song name .", "target": "SELECT artist_name FROM artist WHERE country  =  \"UK\" INTERSECT SELECT artist_name FROM song WHERE languages  =  \"English\""}
{"id": "task076-67e8b61e80674b7b9908c9951a0f9bb9", "input": "SQL: SELECT Sex FROM Student GROUP BY Sex ORDER BY Count ( * ) Desc LIMIT 1\nFeedback: Replace sex in Students table with allergy of has allergy table .", "target": "SELECT Allergy FROM Has_allergy GROUP BY Allergy ORDER BY count(*) DESC LIMIT 1"}
{"id": "task076-2c8c531a74534eb4aa224ed8889512cb", "input": "SQL: SELECT Max ( Adults ) , Sum ( Kids ) FROM Reservations\nFeedback: Find number of rows of summation of adults and kids whose max occupancy is maximum .", "target": "SELECT count(*) FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId WHERE T2.maxOccupancy  =  T1.Adults + T1.Kids"}
{"id": "task076-ba50deb3b8f94519a25e082261176c91", "input": "SQL: SELECT DISTINCT staff_first_name , staff_last_name FROM Staff WHERE staff_id = 1\nFeedback: Replace staff id with problem id of Problem Log's table .", "target": "SELECT DISTINCT staff_first_name ,  staff_last_name FROM staff AS T1 JOIN problem_log AS T2 ON T1.staff_id = T2.assigned_to_staff_id WHERE T2.problem_id = 1"}
{"id": "task076-968b30e6a8d04320872aa38353dd939a", "input": "SQL: SELECT T1.Code FROM country AS T1 WHERE T1.Continent = ( SELECT T2.CountryCode FROM countrylanguage AS T2 WHERE T2.Language = \"Republic\" ) EXCEPT SELECT T1.Code FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"English\"\nFeedback: You should use government form instead of language and also make sure that value should not be in the result of step 2 and 4.", "target": "SELECT Code FROM country WHERE GovernmentForm != \"Republic\" EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \"English\""}
{"id": "task076-dc79c5b6a5ad40f5bfd333a03038a01d", "input": "SQL: SELECT T1.seq FROM sqlite_sequence AS T1 JOIN tracks AS T2 WHERE T2.name = \"Fast As a Shark\"\nFeedback: Need to replace name with composer .", "target": "SELECT composer FROM tracks WHERE name = \"Fast As a Shark\""}
{"id": "task076-2a0fa8c8c4e44e7ebc95da9bbb22a882", "input": "SQL: SELECT T2.Name , Avg ( T1.Speed ) FROM roller_coaster AS T1 JOIN country AS T2 ON T1.Country_ID = T2.Country_ID GROUP BY T1.Country_ID\nFeedback: Find country's name in place of country id in step 2.", "target": "SELECT T1.Name ,  avg(T2.Speed) FROM country AS T1 JOIN roller_coaster AS T2 ON T1.Country_ID  =  T2.Country_ID GROUP BY T1.Name"}
{"id": "task076-1d12e8e907664d5da7b047889081da05", "input": "SQL: SELECT decor FROM Rooms WHERE decor = \"modern\" INTERSECT SELECT decor FROM Rooms WHERE bedType = \"Recluse and defiance\"\nFeedback: Remove 1st and 3rd steps , Replace bed Type with room name .", "target": "SELECT decor FROM Rooms WHERE roomName  =  \"Recluse and defiance\""}
{"id": "task076-517499ee3af6487881e90ed17869f37f", "input": "SQL: SELECT text FROM tweets WHERE text = \"intern\"\nFeedback: Make sure topic of text is intern .", "target": "SELECT text FROM tweets WHERE text LIKE '%intern%'"}
{"id": "task076-ec2e2f021bb440e19fe03862f309432f", "input": "SQL: SELECT GovernmentForm FROM country WHERE Population < ( SELECT Population FROM country WHERE Continent = \"Africa\" )\nFeedback: In step 1 find minimum population and swap Africa with Asia , in step 2 government form with name name .", "target": "SELECT Name FROM country WHERE Continent  =  \"Africa\"  AND population  <  (SELECT max(population) FROM country WHERE Continent  =  \"Asia\")"}
{"id": "task076-9e8138bfd785423ebf0c79e9b197043d", "input": "SQL: SELECT train_number , time FROM train WHERE destination = \"Chennai\"\nFeedback: Check that destination should be Guruvayur and origin should be Chennai .", "target": "SELECT train_number ,  TIME FROM train WHERE origin  =  'Chennai' AND destination  =  'Guruvayur'"}
{"id": "task076-50dba17f7cd0462fbe243cb435544a34", "input": "SQL: SELECT Name FROM driver EXCEPT SELECT Name FROM driver\nFeedback: In step 2 find name of driver table whose corresponding driver id is also present in school bus's driver id .", "target": "SELECT name FROM driver WHERE driver_id NOT IN (SELECT driver_id FROM school_bus)"}
{"id": "task076-4e62c5a06dff4f89b517e3fdf50dbfc7", "input": "SQL: SELECT T1.rating , Avg ( T2.rating ) FROM genre AS T1 JOIN song AS T2 ON T1.g_name = T2.genre_is GROUP BY T2.languages\nFeedback: no need for step 1. remove genre table", "target": "SELECT avg(rating) ,  languages FROM song GROUP BY languages"}
{"id": "task076-d4efd75d93234ad3beb10f47fedb468d", "input": "SQL: SELECT T1.Customer_Name FROM Performers AS T1 JOIN Bookings AS T2 JOIN Performers_in_Bookings AS T3 ON T1.Performer_ID = T3.Performer_ID AND T3.Order_ID = T2.Booking_ID WHERE T2.Status_Code = \"stop\"\nFeedback: Make sure to add drama workshop groups table in step 1 and in step 2 , replace customer name with store name .", "target": "SELECT T2.Store_Name FROM Bookings AS T1 JOIN Drama_Workshop_Groups AS T2 ON T1.Workshop_Group_ID  =  T2.Workshop_Group_ID WHERE T1.Status_Code  =  \"stop\""}
{"id": "task076-aea38c98e39f477eb91422ef09833406", "input": "SQL: SELECT DISTINCT T1.LName FROM Student AS T1 JOIN Voting_record AS T2 ON T1.StuID = T2.StuID WHERE T2.President_Vote = 1004\nFeedback: There is no need to find president vote equals 1004 , find for those student who have class president vote in plcae of that .", "target": "SELECT DISTINCT T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.CLASS_President_VOTE"}
{"id": "task076-32ea8f8b14d444c0ae906e4a3fb6e307", "input": "SQL: SELECT T2.treatment_type_code , T1.weight FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id\nFeedback: Interchange treatment type code , weight with distinct breed code , size code in step 2.", "target": "SELECT DISTINCT breed_code ,  size_code FROM dogs"}
{"id": "task076-75a1f296b7964dc7ad219b42ad7d9388", "input": "SQL: SELECT T1.state_province_county FROM Addresses AS T1 JOIN Individuals AS T2 WHERE T2.individual_first_name = \"6862 Kaitlyn Knolls\"\nFeedback: In step 2 line 1 number building should be used instead of \"individual first name\".", "target": "SELECT state_province_county FROM addresses WHERE line_1_number_building LIKE \"%6862 Kaitlyn Knolls%\""}
{"id": "task076-56a116ff3e7a41e791a64b51ff7f4f95", "input": "SQL: SELECT Count ( * ) FROM Engineer_Visits WHERE fault_status = \"Waiting\"\nFeedback: Replace engineer visits table with fault log parts table and remove the last part .", "target": "SELECT DISTINCT fault_status FROM Fault_Log_Parts"}
{"id": "task076-c9c68e66ebef472380a8f292c9fa031c", "input": "SQL: SELECT T1.chargeable_amount FROM Parts AS T1 JOIN Assets AS T2 JOIN Asset_Parts AS T3 ON T1.part_id = T3.part_id AND T3.asset_id = T2.asset_id ORDER BY T2.asset_details Asc\nFeedback: Also find asset make , asset model , asset details , remove chergeable amount and replace asset details with asset disposed date .", "target": "SELECT asset_make ,  asset_model ,  asset_details FROM Assets ORDER BY asset_disposed_date ASC"}
{"id": "task076-39f781829b5846a8972eef6aa8f44498", "input": "SQL: SELECT T2.Name FROM candidate AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T1.Unsure_rate < 0.2\nFeedback: There should be support rate instead of unsure rate and oppose rate instead of 0. 2.", "target": "SELECT t1.name FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id WHERE t2.support_rate  <  t2.oppose_rate"}
{"id": "task076-31ffe95c66a44b8c9de5c40d9f7e4da6", "input": "SQL: SELECT Sex FROM Student WHERE Sex = \"F\" GROUP BY Sex ORDER BY Count ( * ) Desc LIMIT 1\nFeedback: In step 2 change sex with advisor , Number of rows that correspond of each value of sex .", "target": "SELECT Major FROM STUDENT WHERE Sex  =  \"F\" GROUP BY major ORDER BY count(*) DESC LIMIT 1"}
{"id": "task076-6b0fb7ce43f3487b9dbd06f58e24fc5e", "input": "SQL: SELECT Count ( * ) FROM festival_detail\nFeedback: Need to Summation of num of audience for each festivals .", "target": "SELECT sum(Num_of_Audience) FROM festival_detail"}
{"id": "task076-0bf355f1af8343f98424d65565926763", "input": "SQL: SELECT Address FROM Locations\nFeedback: Here it is needed to find the tourist details of visitors table .", "target": "SELECT Tourist_Details FROM VISITORS"}
{"id": "task076-11676afc16e6417f9f328c9b03c68070", "input": "SQL: SELECT Count ( * ) FROM Ref_Characteristic_Types\nFeedback: Need to find summation of colors from reference colors", "target": "SELECT count(*) FROM ref_colors"}
{"id": "task076-a3d8adaa98c94944a31695a645cd4d0f", "input": "SQL: SELECT Count ( * ) FROM Customer_Orders WHERE order_status = \"Cancelled\"\nFeedback: should find the number of different customer id not the number of rows", "target": "SELECT count(DISTINCT customer_id) FROM customer_orders WHERE order_status  =  \"Cancelled\""}
{"id": "task076-37dbeb19b7284c25a8c78e169832ea33", "input": "SQL: SELECT * FROM Allergy_Type AS T1 EXCEPT SELECT T2.StuID FROM Student AS T2\nFeedback: Replace allergy name table with has allergy table and interchange words step 1 and step 2 in step 3.", "target": "SELECT StuID FROM Student EXCEPT SELECT StuID FROM Has_allergy"}
{"id": "task076-df65645b806546bcb0dd9766bad251bd", "input": "SQL: SELECT T2.Season FROM stadium AS T1 JOIN game AS T2 ON T1.id = T2.stadium_id WHERE T1.name = \"Walter Samuel\"\nFeedback: In step 1 replace stadium with injury accident , in step 2 replace name with player .", "target": "SELECT T1.season FROM game AS T1 JOIN injury_accident AS T2 ON T1.id  =  T2.game_id WHERE T2.player  =  'Walter Samuel'"}
{"id": "task076-14830d31f4be478c9b3adfd752bc2fb7", "input": "SQL: SELECT T1.url , T1.time FROM races AS T1 JOIN lapTimes AS T2 ON T1.raceId = T2.raceId WHERE T2.milliseconds > 100000\nFeedback: Need to find distinct driver id , nationality of drivers table whose lap times in millisecond is greater than 100000.", "target": "SELECT DISTINCT T1.driverid ,  T1.nationality FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE T2.milliseconds >  100000"}
{"id": "task076-bdce6702376e4f18b123f17bf866a8e8", "input": "SQL: SELECT T3.last_name FROM Addresses AS T1 JOIN Staff AS T2 ON T2.staff_address_id = T1.address_id JOIN Customers AS T3 ON T1.address_id = T3.customer_address_id WHERE T2.last_name = \"Sawayn\" INTERSECT SELECT T3.last_name FROM Addresses AS T1 JOIN Staff AS T2 ON T2.staff_address_id = T1.address_id JOIN Customers AS T3 ON T1.address_id = T3.customer_address_id WHERE T2.last_name = \"Sawayn\"\nFeedback: In step 2 only find Customer's last name , in step 3 only find Staff's last name .", "target": "SELECT last_name FROM Customers INTERSECT SELECT last_name FROM Staff"}
{"id": "task076-18b4694663884b21b1ea082161034882", "input": "SQL: SELECT Count ( * ) , order_id FROM Orders GROUP BY order_id\nFeedback: Should find the number of corresponding rows of product id in order items table .", "target": "SELECT order_id ,  count(DISTINCT product_id) FROM Order_items GROUP BY order_id"}
{"id": "task076-5e6d44360a8c40cda883723bab5aa03a", "input": "SQL: SELECT billing_state FROM invoices GROUP BY billing_state ORDER BY Count ( * ) Desc LIMIT 1\nFeedback: Make sure state is one of the US country .", "target": "SELECT billing_state ,  COUNT(*) FROM invoices WHERE billing_country  =  \"USA\" GROUP BY billing_state ORDER BY COUNT(*) DESC LIMIT 1"}
{"id": "task076-5fa79a2b24924c8482db37eea2ffccfe", "input": "SQL: SELECT T1.FacID FROM Faculty AS T1 UNION SELECT T2.Advisor FROM Student AS T2\nFeedback: Find faculty id of faculty who is present in faculty participates in table and advisor of student table .", "target": "SELECT FacID FROM Faculty_participates_in INTERSECT SELECT advisor FROM Student"}
{"id": "task076-686fc4d2b3b24cf98d2d28cef3e90c1f", "input": "SQL: SELECT T2.Customer_Email_Address FROM Addresses AS T1 JOIN Performers AS T2 ON T1.Address_ID = T2.Address_ID WHERE T1.State_County = \"Alaska\"\nFeedback: change performers table with drama workshop groups also change customer email address with store email address", "target": "SELECT T2.Store_Email_Address FROM Addresses AS T1 JOIN Drama_Workshop_Groups AS T2 ON T1.Address_ID  =  T2.Address_ID WHERE T1.State_County  =  \"Alaska\""}
{"id": "task076-3fe61208035a4cb88c9f5178f3bee632", "input": "SQL: SELECT T1.cName FROM College AS T1 JOIN Player AS T2 JOIN Tryout AS T3 ON T1.cName = T3.cName AND T3.pID = T2.pID WHERE T2.pName LIKE \"D%\"\nFeedback: replace \"contains\" with \"equals\".", "target": "SELECT T1.cName FROM  tryout AS T1 JOIN player AS T2 ON T1.pID  =  T2.pID WHERE T2.pName LIKE 'D%'"}
{"id": "task076-ee4682db8ba64c0eb494ba82e2e9de51", "input": "SQL: SELECT first_name , last_name FROM People\nFeedback: And make sure they are candidate .", "target": "SELECT T2.first_name ,  T2.last_name FROM candidates AS T1 JOIN people AS T2 ON T1.candidate_id = T2.person_id"}
{"id": "task076-757d0f82ca1343c6aa16b9c39ee16474", "input": "SQL: SELECT T2.positionText , T1.name FROM races AS T1 JOIN constructorStandings AS T2 ON T1.raceId = T2.raceId JOIN lapTimes AS T3 ON T1.raceId = T3.raceId WHERE T3.milliseconds < 93000\nFeedback: Find distinct drivers's forename ,  surname whose lap times in milliseconds less than 93000.", "target": "SELECT DISTINCT T1.forename ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE T2.milliseconds < 93000"}
{"id": "task076-bd66c52a478849588b2369a5150e2c19", "input": "SQL: SELECT T2.Other_Details FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID WHERE T1.Document_Name LIKE \"Korea\"\nFeedback: Use paragraph text in step 2 and omit name of document.", "target": "SELECT Other_Details FROM Paragraphs WHERE paragraph_text  =  'Korea'"}
{"id": "task076-fb839e7540eb4675970d7cc0230a9210", "input": "SQL: SELECT T1.state FROM bank AS T1 JOIN customer AS T2 ON T1.branch_ID = T2.branch_ID GROUP BY T2.state ORDER BY Count ( * ) Desc LIMIT 1\nFeedback: summation of bank's no of customers should be used instead of number of rows in step 2", "target": "SELECT state FROM bank GROUP BY state ORDER BY sum(no_of_customers) DESC LIMIT 1"}
{"id": "task076-1fb68ae5dcae4f1f82fe7884e6af8172", "input": "SQL: SELECT Count ( * ) FROM stadium\nFeedback: Find number of games whose game id is not one of the result of injury accident table .", "target": "SELECT count(*) FROM game WHERE id NOT IN ( SELECT game_id FROM injury_accident )"}
{"id": "task076-65ecde4879d546f0829eba344cbaf56c", "input": "SQL: SELECT T1.Code , T2.Name , T2.Name FROM mission AS T1 JOIN ship AS T2 ON T1.Ship_ID = T2.Ship_ID\nFeedback: Exchange second name with fate in step 2.", "target": "SELECT T1.Code ,  T1.Fate ,  T2.Name FROM mission AS T1 JOIN ship AS T2 ON T1.Ship_ID  =  T2.Ship_ID"}
{"id": "task076-06eccbafd34d4c13ab8f186b1c19310b", "input": "SQL: SELECT Count ( * ) FROM Customers_Cards AS T1 WHERE T1.customer_id NOT IN ( SELECT T2.customer_id FROM Accounts AS T2 )\nFeedback: In step 2 , replace customers cards table with customers table at both places .", "target": "SELECT count(*) FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Accounts)"}
{"id": "task076-9a6875970e184a7c9642184ffb1f33d3", "input": "SQL: SELECT T1.EMPLOYEE_ID FROM employees AS T1 WHERE T1.SALARY > ( SELECT Avg ( T2.MIN_SALARY ) FROM jobs AS T2 )\nFeedback: Replace min salary with salary .", "target": "SELECT employee_id FROM employees WHERE salary  >  (SELECT AVG(salary) FROM employees)"}
{"id": "task076-bd0d2d291bf646e185a5fd65c2d4ea08", "input": "SQL: SELECT T1.flno , T1.origin , T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid ORDER BY T1.destination Asc\nFeedback: Replace name with destination , replace destination with origin .", "target": "SELECT flno ,  origin ,  destination FROM Flight ORDER BY origin"}
{"id": "task076-c0de781dc4814a35a5dc8e2a2c19d1d8", "input": "SQL: SELECT T1.Issue_Date , T2.Music_Festival FROM volume AS T1 JOIN music_festival AS T2 ON T1.Volume_ID = T2.Volume\nFeedback: Find date of ceremony and result instead of issue date , music festival .", "target": "SELECT Date_of_ceremony ,  RESULT FROM music_festival"}
{"id": "task076-b5fc8f13bc5a41ad8c2375668ce74630", "input": "SQL: SELECT T1.course_name FROM Courses AS T1 JOIN Student_Course_Registrations AS T2 ON T1.course_id = T2.course_id JOIN Student_Course_Attendance AS T3 ON T2.course_id = T3.course_id GROUP BY T3.course_id ORDER BY Count ( * ) Desc LIMIT 1\nFeedback: In step 2 , need to replace student course attendance with student course registrations .", "target": "SELECT T1.course_name FROM courses AS T1 JOIN student_course_registrations AS T2 ON T1.course_id = T2.course_Id GROUP BY T1.course_id ORDER BY count(*) DESC LIMIT 1"}
{"id": "task076-fe48b215e8804efc8b3376e92117dc3b", "input": "SQL: SELECT T2.Name FROM appellations AS T1 JOIN wine AS T2 ON T1.Appelation = T2.Appelation WHERE T2.Price < 50 AND T1.County = \"Sonoma\" AND T1.County = \"Monterey\"\nFeedback: no need to find county equals Sonoma so remove it .", "target": "SELECT T2.Name FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation WHERE T1.County  =  \"Monterey\" AND T2.price  <  50"}
{"id": "task076-2b9d658dc94347fb9a60eb3968db9d63", "input": "SQL: SELECT T1.login_name , T1.family_name , T2.course_description FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id = T2.author_id\nFeedback: No need to find course description in step 2.", "target": "SELECT login_name ,  family_name FROM Course_Authors_and_Tutors"}
{"id": "task076-43c5f213a43f45218af7e0c293942400", "input": "SQL: SELECT Room FROM Faculty\nFeedback: room of faculty table is wrong , it should be replaced by activity name of Activity table .", "target": "SELECT activity_name FROM Activity"}
{"id": "task076-b7783bb1dd2448d1a5958c62c3a91510", "input": "SQL: SELECT eid , name FROM employee\nFeedback: Make sure salary of employee is largest .", "target": "SELECT eid ,  name FROM Employee ORDER BY salary DESC LIMIT 1"}
